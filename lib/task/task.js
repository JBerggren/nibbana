// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractTask, Project, Task, constants,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractTask = require('./abstract');

  Project = require('./project');

  constants = require('../constants');

  Task = (function(_super) {

    __extends(Task, _super);

    function Task(data) {
      this.type = constants.task.type.TASK;
      Task.__super__.constructor.call(this, data);
    }

    Task.prototype.to_project = function() {
      var active, p;
      active = this.data.state !== constants.task.state.LATER && this.data.state !== constants.task.state.SOMEDAY;
      if (active) {
        this.state(constants.task.state.ACTIVE_PROJECT);
      }
      this._set("type", constants.task.type.PROJECT);
      p = new Project(this.data);
      p.dirty = this.dirty;
      return p;
    };

    Task.prototype.set_parent = function(parent) {
      if (typeof parent === "object" && parent.id) {
        parent = parent.id;
      }
      this._set("parentid", parent);
      return this;
    };

    Task.prototype.start_date = function(start) {
      if (start === "undefined") {
        return this.data.start;
      }
      if (typeof start.toISOString === "function") {
        start = start.toISOString().slice(0, 10).replace(/-/g, '');
      }
      this._set("startdate", start ? start : "");
      return this;
    };

    Task.prototype.time = function(time) {
      if (time === "undefined") {
        return this.data.etime;
      }
      this._set("etime", time);
      return this;
    };

    Task.prototype.energy = function(energy) {
      if (energy === "undefined") {
        return this.data.energy;
      }
      this._set("energy", energy);
      return this;
    };

    return Task;

  })(AbstractTask);

  module.exports = Task;

}).call(this);
