// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractTask, Project, Task, constants,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractTask = require('./abstract');

  Task = require('./task');

  constants = require('../constants');

  Project = (function(_super) {

    __extends(Project, _super);

    function Project(data) {
      this.type = constants.task.type.PROJECT;
      Project.__super__.constructor.call(this, data);
    }

    Project.prototype.to_task = function() {
      var new_state, t;
      new_state = this.data.parentid && this.data.state === constants.task.state.ACTIVE_PROJECT ? constants.task.state.NEXT : this.data.state === constants.task.state.ACTIVE_PROJECT ? constants.task.state.INBOX : void 0;
      if (new_state) {
        this._set("state", new_state);
      }
      this._set("type", constants.task.state.TASK);
      t = new Task(this.data);
      t.dirty = this.dirty;
      return t;
    };

    Project.prototype.sequential = function(toggle) {
      if (toggle == null) {
        toggle = true;
      }
      this._set("ps", Constants.Project.SEQUENTIAL);
      return this;
    };

    Project.prototype.parallel = function(toggle) {
      if (toggle == null) {
        toggle = true;
      }
      this._set("ps", Constants.Project.PARALLEL);
      return this;
    };

    Project.prototype.is_sequential = function() {
      return this.data.ps === Constants.Project.SEQUENTIAL;
    };

    Project.prototype.is_parallel = function() {
      return this.data.ps === Constants.Project.PARALLEL;
    };

    return Project;

  })(AbstractTask);

  module.exports = Project;

}).call(this);
