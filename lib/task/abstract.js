// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractTask, constants, jq, util, uuid;

  constants = require('../constants');

  util = require('../util');

  jq = require('jquery');

  uuid = require('node-uuid');

  AbstractTask = (function() {

    function AbstractTask(data) {
      this.data = this.template(data);
      this.dirty = [];
    }

    AbstractTask.prototype.get_data = function() {
      var data;
      data = jq.extend({
        "__internal_type": this.constructor.name
      }, this.data);
      data.tags = data.tags.join(",");
      return data;
    };

    AbstractTask.prototype.store_key = function() {
      return "task-" + this.data.id;
    };

    AbstractTask.prototype.template = function(data) {
      var k, tpl, v;
      tpl = {
        id: !data.id ? uuid.v4() : data.id,
        name: "Unnamed",
        type: this.type,
        state: data.parentid ? constants.task.state.NEXT : constants.task.state.INBOX,
        parentid: "",
        waitingfor: "",
        completed: 0,
        cancelled: 0,
        seq: 0,
        seqp: 0,
        seqt: 0,
        tags: [],
        note: "",
        ps: 0,
        etime: 0,
        energy: 0,
        startdate: "",
        duedate: "",
        recurring: ""
      };
      if (typeof data.tags === "string") {
        data.tags = data.tags.split(",");
      }
      tpl = jq.extend(tpl, data);
      for (k in tpl) {
        v = tpl[k];
        if (k[0] !== '_' && !tpl["_" + k]) {
          tpl["_" + k] = util.unix_time();
        }
      }
      return tpl;
    };

    AbstractTask.prototype._set = function(key, val) {
      this.dirty.push(key);
      this.data[key] = val;
      return this.data["_" + key] = util.unix_time();
    };

    AbstractTask.prototype.id = function(id) {
      return this.data.id;
    };

    AbstractTask.prototype.name = function(name) {
      if (name === void 0) {
        return this.data.name;
      }
      this._set("name", name);
      return this;
    };

    AbstractTask.prototype.note = function(note) {
      if (note === void 0) {
        return this.data.note;
      }
      this._set("note", note);
      return this;
    };

    AbstractTask.prototype.state = function(state) {
      if (state === void 0) {
        return this.data.state;
      }
      this._set("state", state);
      return this;
    };

    AbstractTask.prototype.parentid = function(parentid) {
      if (parentid === void 0) {
        return this.data.parentid;
      }
      this._set("parentid", parentid);
      return this;
    };

    AbstractTask.prototype.waiting_for = function(waiting_for) {
      if (waiting_for === void 0) {
        return this.data.waitingfor;
      }
      this._set("waitingfor", waiting_for);
      return this;
    };

    AbstractTask.prototype.due_date = function(due) {
      if (due === void 0) {
        return this.data.due;
      }
      if (typeof due.toISOString === "function") {
        due = due.toISOString().slice(0, 10).replace(/-/g, '');
      }
      this._set("duedate", due ? due : "");
      return this;
    };

    AbstractTask.prototype.focus = function(toggle) {
      if (toggle == null) {
        toggle = true;
      }
      this._set("seqt", toggle ? util.unix_time() : 0);
      return this;
    };

    AbstractTask.prototype.is_focused = function() {
      return this.data.seqt > 0;
    };

    AbstractTask.prototype.complete = function(toggle) {
      if (toggle == null) {
        toggle = true;
      }
      this._set("complete", toggle ? util.unix_time() : 0);
      return this;
    };

    AbstractTask.prototype.is_completed = function() {
      return this.data.complete > 0;
    };

    AbstractTask.prototype.cancel = function(toggle) {
      if (toggle == null) {
        toggle = true;
      }
      this._set("cancelled", toggle);
      return this;
    };

    AbstractTask.prototype.is_cancelled = function() {
      return this.data.cancelled > 0;
    };

    AbstractTask.prototype.trash = function() {
      this.state(constants.task.state.TRASHED);
      return this;
    };

    AbstractTask.prototype.is_trashed = function() {
      return this.data.state === constants.task.state.TRASHED;
    };

    AbstractTask.prototype["delete"] = function() {
      delete this.data.type;
      this.state(constants.task.state.DELETED);
      return this;
    };

    AbstractTask.prototype.is_deleted = function() {
      return this.data.state === constants.task.state.DELETED;
    };

    AbstractTask.prototype.log = function() {
      this.state(constants.task.state.LOGGED);
      return this;
    };

    AbstractTask.prototype.add_tag = function(tag) {
      if (!(this.data.tags.indexof(tag) > -1)) {
        this.data.tags.push(tag);
      }
      return this;
    };

    AbstractTask.prototype.remove_tag = function(tag) {
      var index;
      index = this.data.tags.indexof(tag);
      if (index > -1) {
        this.data.tags.splice(index, 1);
      }
      return this;
    };

    AbstractTask.prototype.set_tags = function(tags) {
      if (typeof tags === "string") {
        tags = tags.split(",");
      }
      this.data.tags = tags;
      return this;
    };

    AbstractTask.prototype.waiting_for = function(contact) {
      if (typeof contact === "object" && contact.key) {
        contact = contact.key;
      }
      this._set("waitingfor", contact);
      return this;
    };

    return AbstractTask;

  })();

  module.exports = AbstractTask;

}).call(this);
