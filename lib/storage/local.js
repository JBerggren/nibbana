// Generated by CoffeeScript 1.3.3
(function() {
  var LocalStorage, ObjectStorage;

  ObjectStorage = require('./object');

  LocalStorage = (function() {

    function LocalStorage(storage) {
      this.localStorage = storage;
      this.objectStorage = new ObjectStorage;
      this.dirty = [];
    }

    LocalStorage.prototype.has = function(key) {
      return this.get(key) === null;
    };

    LocalStorage.prototype.get = function(key) {
      var data, klass;
      if (this.objectStorage.has(key)) {
        return this.objectStorage.get(key);
      }
      data = JSON.parse(this.localStorage.getItem(key));
      this.objectStorage.set(key, data, false);
      if (data === null || typeof data !== "object" || !data.__internal_type) {
        return data;
      }
      klass = eval(data.__internal_type);
      data = new klass(data);
      this.objectStorage.set(key, data, false);
      return data;
    };

    LocalStorage.prototype.set = function(key, data, make_dirty) {
      if (make_dirty == null) {
        make_dirty = true;
      }
      this.objectStorage.set(key, data, false);
      if (data !== null && data["get_data"]) {
        data = data.get_data();
      }
      this.localStorage.setItem(key, JSON.stringify(data));
      if (make_dirty) {
        return this.dirty.push(key);
      }
    };

    LocalStorage.prototype.remove = function(key) {
      this.objectStorage.remove(key);
      return this.localStorage.removeItem(key);
    };

    LocalStorage.prototype.clear = function(key) {
      this.objectStorage.clear();
      return this.localStorage.clear();
    };

    LocalStorage.prototype.map = function(func) {
      var entry, i, k, mapped, _i, _ref;
      mapped = [];
      for (i = _i = 0, _ref = this.localStorage.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        k = this.localStorage.key(i);
        entry = this.get(k);
        if (func(k, entry)) {
          mapped.push(entry);
        }
      }
      return mapped;
    };

    LocalStorage.prototype.clear_dirty = function() {
      return this.dirty = [];
    };

    return LocalStorage;

  })();

  module.exports = LocalStorage;

}).call(this);
